Types of Constructors
There are three types of constructors: Default, No-arg constructor and Parameterized.
********************************************************************************************************************************
Default constructor:
If you do not implement any constructor in your class,
Java compiler inserts a default constructor into your code on your behalf.
This constructor is known as default constructor.
You would not find it in your source code(the java file)
as it would be inserted into the code during compilation and exists in .class file.

Note: If you implement any constructor then you no longer receive a default constructor from Java compiler.

********************************************************************************************************************************
no-arg constructor:
Constructor with no arguments is known as no-arg constructor.
The signature is same as default constructor,
however body can have any code unlike default constructor
where the body of the constructor is empty.

Example: no-arg constructor

class HelloWorld
{
     public HelloWorld()
     {
         System.out.println("This is a no argument constructor");
     }
     public static void main(String args[]) {
    	 new HelloWorld();
     }
}
****************************************************************************************************************************
Parameterized constructor:
Constructor with arguments is known as Parameterized constructor.
To check the example look at the constructor java file.

Tricky question:
What if we implement only parameterized constructor in class

class Test
{
      private int var;
      public Test(int num)
      {
             var=num;
      }
      public int getValue()
      {
              return var;
      }
      public static void main(String args[])
      {
              Test obj = new Test();
              System.out.println("value of var is: "+obj.getValue());
      }
}

*******************************************************************************************************************************
Output: It will throw a compilation error.
The reason is, the statement Test obj = new Test(); is invoking a default constructor
which we don’t have in our program.
when you don’t implement any constructor in your class,
compiler inserts the default constructor into your code,
however when you implement any constructor (in above example I have implemented parameterized constructor with int parameter),
then you don’t receive the default constructor by compiler into your code.
********************************************************************************************************************************
Note:
If we remove the parameterized constructor from the above code then the program would run fine,
because then compiler would insert the default constructor into your code.
********************************************************************************************************************************
Java – Constructor Chaining with example
When A constructor calls another constructor of same class then this is called constructor chaining.
The real purpose of Constructor Chaining is that you can pass parameters through a bunch of different constructors,
but only have the initialization done in a single place.
This allows you to maintain your initializations from a single location,
while providing multiple constructors to the user.
If we don’t chain, and two different constructors require a specific parameter,
you will have to initialize that parameter twice, and when the initialization changes,
you’ll have to change it in every constructor, instead of just the one.

As a rule, constructors with fewer arguments should call those with more

******************************************************************************************************************************

Constructor Overloading:
Constructor overloading is a concept of having more than one constructor with different parameters list,
in such a way so that each constructor performs a different task.

***************************************************************************************************************************
Java static constructor – Is it really Possible to have them in Java?
Everything that is marked static belongs to the class only,
for example static method cannot be inherited in the sub class because
since each constructor is being called by its subclass during creation of the object of its subclass,
so if you mark constructor as static the subclass will not be able to access the constructor of its parent class
because it is marked static and thus belong to the class only.
This will violate the whole purpose of inheritance concept and that is reason why a constructor cannot be static.
they belong to the class in which they have been declared



When we created the object of child class,
it first invoked the constructor of parent class and then the constructor of it’s own class.
It happened because the new keyword creates the object and then invokes the constructor for initialization,
since every child class constructor by default has super() as first statement which calls it’s parent class’s constructor.
 The statement super() is used to call the parent class(base class) constructor.

This is the reason why constructor cannot be static –
Because if we make them static they cannot be called from child class thus object of child class cannot be created.

****************************************************************************************************************************

Static Constructor Alternative – Static Blocks



